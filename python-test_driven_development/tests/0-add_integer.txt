# add_integer.txt


    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

::

    >>> add_integer(1, -2)
    -1

The function also works with floating-point values.

::

    >>> add_integer(1.0, 2.0)
    3

Floats will be converted to floats before adding.

::

    >>> add_integer(1.9, 0.2)
    1

::

    >>> add_integer(-1.9, -0.2)
    -1

Integers and floats can be combined.

::

    >>> add_integer(1.3, -4)
    -3

The second argument is optional - by default, it is 98.

::

    >>> add_integer(5)
    103

Non-Numbers

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("Hi", 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hi")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(1.5, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "world")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

